conda activate venv_mpvis_flask
C:\ProgramData\Anaconda3\Scripts\activate venv_mpvis_flask


conda create -n venv_mpvis_flask python=3.9


pip install python-dotenv

python3.9 -m venv .venv_mpvis
source .venv_mpvis/bin/activate

5432

Windows
conda create -n _wvenv_mpvis python=3.9
conda activate _wvenv_mpvis
pip install -r /Users/awotoroe/Desktop/mpvis/requirements.txt

run pip install -r requirements.txt to install required modules
run python manage.py db init  to setup alembic migrations
run python manage.py db migrate -m='<your migration message>' to create migration files
then run python manage.py db upgrade to create tables

gunicorn main:app --reload
gunicorn -127.0.0.1:port main:app --reload

Windows
.venv_mpvis_\Scripts\activate 
C:\ProgramData\Anaconda3\Scripts\activate _wvenv_mpvis
waitress-serve --listen=127.0.0.1:8000 main:app
pip install hupper
hupper -m waitress --listen=127.0.0.1:8000 main:app


src/api/resources --- flask-restful resources for your project
src/models --- SQLAlchemy models and schema
src/routes/api --- contains all your route definition
src/utils --- contains validations, security and helper files
src/middlewares --- define your middleware files here
You can modify the app to suit your need.
Happy usage.


"postgres://postgres:Tope@3236@localhost:5432"

format for you
npx prettier --write "src/pages/**/*.vue"

pip install pyjwt pillow

python manage.py db migrate

push updates
python manage.py db upgrade

brew services start redis

brew services info redis

brew services stop redis

Connect to Redis
Once Redis is running, you can test it by running redis-cli:

redis-cli


python -m celery -A main  worker
celery -A main worker
celery -A mpvis_app.celery worker


mklink "C:\Users\hal\AppData\Local\Continuum\anaconda3\DLLs\libssl-1_1-x64.dll" "C:\Users\hal\AppData\Local\Continuum\anaconda3\Library\bin\libssl-1_1-x64.dll"

mklink "C:\ProgramData\Anaconda3\DLLs\libcrypto-1_1-x64.dll" "C:\ProgramData\Anaconda3\Library\bin\libcrypto-1_1-x64.dll"

pip install bioseq
pip install biopython

When you have error_message
pip install -r requirements.txt (This will fix most of your issues. Especially when it has a lot to do with packages.)
pip install --upgrade attrs


conda activate jupyter_env

C:\ProgramData\Anaconda3\Scripts\activate jupyter_env

net use Y: \\sshfs.r\%awotoroe%@hpc-login01.rki.local\scratch\%USERNAME%

net use /PERSISTENT:YES Y: \\sshfs.r\%awotoroe%@hpc-login02.rki.local\scratch\%awotoroe%

pip install hdbscan

Previous research and short information about myself...

pip install missingno


flask db init
flask db migrate -m "initial migration"
flask db upgrade

https://learning.postman.com/docs/collections/using-newman-cli/installing-running-newman/#installing-newman
C:\Users\awotoroe\AppData\Roaming\npm\newman run mycollection.json --proxy http://fw-bln.rki.local:8020 --proxy-auth awotoroe:TopeBimboife@32@36 --environment dev_env_postman.json

$ newman run https://www.postman.com/collections/cb208e7e64056f5294e5 -e dev_environment.json

HTTP_PROXY=http://your-proxy-url:port HTTPS_PROXY=http://your-proxy-url:port newman run your_collection.json


set HTTP_PROXY=http://fw-bln.rki.local:8020
set HTTPS_PROXY=http://fw-bln.rki.local:8020
newman run your_collection.json

curl -X POST http://127.0.0.1:8000/login 
