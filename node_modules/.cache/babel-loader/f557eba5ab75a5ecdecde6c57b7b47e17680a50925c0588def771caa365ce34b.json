{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport { default as clone_ } from 'clone';\nimport deepEqual_ from 'fast-deep-equal';\nimport stableStringify from 'fast-json-stable-stringify';\nimport { hasOwnProperty, isNumber, isString, splitAccessPath, stringValue, writeConfig } from 'vega-util';\nimport { isLogicalAnd, isLogicalNot, isLogicalOr } from './logical';\nexport const deepEqual = deepEqual_;\nexport const duplicate = clone_;\nexport function never(message) {\n  throw new Error(message);\n}\n/**\n * Creates an object composed of the picked object properties.\n *\n * var object = {'a': 1, 'b': '2', 'c': 3};\n * pick(object, ['a', 'c']);\n * // â†’ {'a': 1, 'c': 3}\n */\n// eslint-disable-next-line @typescript-eslint/ban-types\nexport function pick(obj, props) {\n  const copy = {};\n  for (const prop of props) {\n    if (hasOwnProperty(obj, prop)) {\n      copy[prop] = obj[prop];\n    }\n  }\n  return copy;\n}\n/**\n * The opposite of _.pick; this method creates an object composed of the own\n * and inherited enumerable string keyed properties of object that are not omitted.\n */\n// eslint-disable-next-line @typescript-eslint/ban-types\nexport function omit(obj, props) {\n  const copy = {\n    ...obj\n  };\n  for (const prop of props) {\n    delete copy[prop];\n  }\n  return copy;\n}\n/**\n * Monkey patch Set so that `stringify` produces a string representation of sets.\n */\nSet.prototype['toJSON'] = function () {\n  return `Set(${[...this].map(x => stableStringify(x)).join(',')})`;\n};\n/**\n * Converts any object to a string representation that can be consumed by humans.\n */\nexport const stringify = stableStringify;\n/**\n * Converts any object to a string of limited size, or a number.\n */\nexport function hash(a) {\n  if (isNumber(a)) {\n    return a;\n  }\n  const str = isString(a) ? a : stableStringify(a);\n  // short strings can be used as hash directly, longer strings are hashed to reduce memory usage\n  if (str.length < 250) {\n    return str;\n  }\n  // from http://werxltd.com/wp/2010/05/13/javascript-implementation-of-javas-string-hashcode-method/\n  let h = 0;\n  for (let i = 0; i < str.length; i++) {\n    const char = str.charCodeAt(i);\n    h = (h << 5) - h + char;\n    h = h & h; // Convert to 32bit integer\n  }\n\n  return h;\n}\nexport function isNullOrFalse(x) {\n  return x === false || x === null;\n}\nexport function contains(array, item) {\n  return array.includes(item);\n}\n/**\n * Returns true if any item returns true.\n */\nexport function some(arr, f) {\n  let i = 0;\n  for (const [k, a] of arr.entries()) {\n    if (f(a, k, i++)) {\n      return true;\n    }\n  }\n  return false;\n}\n/**\n * Returns true if all items return true.\n */\nexport function every(arr, f) {\n  let i = 0;\n  for (const [k, a] of arr.entries()) {\n    if (!f(a, k, i++)) {\n      return false;\n    }\n  }\n  return true;\n}\n/**\n * recursively merges src into dest\n */\nexport function mergeDeep(dest, ...src) {\n  for (const s of src) {\n    deepMerge_(dest, s ?? {});\n  }\n  return dest;\n}\nfunction deepMerge_(dest, src) {\n  for (const property of keys(src)) {\n    writeConfig(dest, property, src[property], true);\n  }\n}\nexport function unique(values, f) {\n  const results = [];\n  const u = {};\n  let v;\n  for (const val of values) {\n    v = f(val);\n    if (v in u) {\n      continue;\n    }\n    u[v] = 1;\n    results.push(val);\n  }\n  return results;\n}\n/**\n * Returns true if the two dictionaries disagree. Applies only to defined values.\n */\nexport function isEqual(dict, other) {\n  const dictKeys = keys(dict);\n  const otherKeys = keys(other);\n  if (dictKeys.length !== otherKeys.length) {\n    return false;\n  }\n  for (const key of dictKeys) {\n    if (dict[key] !== other[key]) {\n      return false;\n    }\n  }\n  return true;\n}\nexport function setEqual(a, b) {\n  if (a.size !== b.size) {\n    return false;\n  }\n  for (const e of a) {\n    if (!b.has(e)) {\n      return false;\n    }\n  }\n  return true;\n}\nexport function hasIntersection(a, b) {\n  for (const key of a) {\n    if (b.has(key)) {\n      return true;\n    }\n  }\n  return false;\n}\nexport function prefixGenerator(a) {\n  const prefixes = new Set();\n  for (const x of a) {\n    const splitField = splitAccessPath(x);\n    // Wrap every element other than the first in `[]`\n    const wrappedWithAccessors = splitField.map((y, i) => i === 0 ? y : `[${y}]`);\n    const computedPrefixes = wrappedWithAccessors.map((_, i) => wrappedWithAccessors.slice(0, i + 1).join(''));\n    for (const y of computedPrefixes) {\n      prefixes.add(y);\n    }\n  }\n  return prefixes;\n}\n/**\n * Returns true if a and b have an intersection. Also return true if a or b are undefined\n * since this means we don't know what fields a node produces or depends on.\n */\nexport function fieldIntersection(a, b) {\n  if (a === undefined || b === undefined) {\n    return true;\n  }\n  return hasIntersection(prefixGenerator(a), prefixGenerator(b));\n}\n// eslint-disable-next-line @typescript-eslint/ban-types\nexport function isEmpty(obj) {\n  return keys(obj).length === 0;\n}\n// This is a stricter version of Object.keys but with better types. See https://github.com/Microsoft/TypeScript/pull/12253#issuecomment-263132208\nexport const keys = Object.keys;\nexport const vals = Object.values;\nexport const entries = Object.entries;\nexport function isBoolean(b) {\n  return b === true || b === false;\n}\n/**\n * Convert a string into a valid variable name\n */\nexport function varName(s) {\n  // Replace non-alphanumeric characters (anything besides a-zA-Z0-9_) with _\n  const alphanumericS = s.replace(/\\W/g, '_');\n  // Add _ if the string has leading numbers.\n  return (s.match(/^\\d+/) ? '_' : '') + alphanumericS;\n}\nexport function logicalExpr(op, cb) {\n  if (isLogicalNot(op)) {\n    return `!(${logicalExpr(op.not, cb)})`;\n  } else if (isLogicalAnd(op)) {\n    return `(${op.and.map(and => logicalExpr(and, cb)).join(') && (')})`;\n  } else if (isLogicalOr(op)) {\n    return `(${op.or.map(or => logicalExpr(or, cb)).join(') || (')})`;\n  } else {\n    return cb(op);\n  }\n}\n/**\n * Delete nested property of an object, and delete the ancestors of the property if they become empty.\n */\nexport function deleteNestedProperty(obj, orderedProps) {\n  if (orderedProps.length === 0) {\n    return true;\n  }\n  const prop = orderedProps.shift(); // eslint-disable-line @typescript-eslint/no-non-null-assertion\n  if (prop in obj && deleteNestedProperty(obj[prop], orderedProps)) {\n    delete obj[prop];\n  }\n  return isEmpty(obj);\n}\nexport function titleCase(s) {\n  return s.charAt(0).toUpperCase() + s.substr(1);\n}\n/**\n * Converts a path to an access path with datum.\n * @param path The field name.\n * @param datum The string to use for `datum`.\n */\nexport function accessPathWithDatum(path, datum = 'datum') {\n  const pieces = splitAccessPath(path);\n  const prefixes = [];\n  for (let i = 1; i <= pieces.length; i++) {\n    const prefix = `[${pieces.slice(0, i).map(stringValue).join('][')}]`;\n    prefixes.push(`${datum}${prefix}`);\n  }\n  return prefixes.join(' && ');\n}\n/**\n * Return access with datum to the flattened field.\n *\n * @param path The field name.\n * @param datum The string to use for `datum`.\n */\nexport function flatAccessWithDatum(path, datum = 'datum') {\n  return `${datum}[${stringValue(splitAccessPath(path).join('.'))}]`;\n}\nfunction escapePathAccess(string) {\n  return string.replace(/(\\[|\\]|\\.|'|\")/g, '\\\\$1');\n}\n/**\n * Replaces path accesses with access to non-nested field.\n * For example, `foo[\"bar\"].baz` becomes `foo\\\\.bar\\\\.baz`.\n */\nexport function replacePathInField(path) {\n  return `${splitAccessPath(path).map(escapePathAccess).join('\\\\.')}`;\n}\n/**\n * Replace all occurrences of a string with another string.\n *\n * @param string the string to replace in\n * @param find the string to replace\n * @param replacement the replacement\n */\nexport function replaceAll(string, find, replacement) {\n  return string.replace(new RegExp(find.replace(/[-/\\\\^$*+?.()|[\\]{}]/g, '\\\\$&'), 'g'), replacement);\n}\n/**\n * Remove path accesses with access from field.\n * For example, `foo[\"bar\"].baz` becomes `foo.bar.baz`.\n */\nexport function removePathFromField(path) {\n  return `${splitAccessPath(path).join('.')}`;\n}\n/**\n * Count the depth of the path. Returns 1 for fields that are not nested.\n */\nexport function accessPathDepth(path) {\n  if (!path) {\n    return 0;\n  }\n  return splitAccessPath(path).length;\n}\n/**\n * This is a replacement for chained || for numeric properties or properties that respect null so that 0 will be included.\n */\nexport function getFirstDefined(...args) {\n  for (const arg of args) {\n    if (arg !== undefined) {\n      return arg;\n    }\n  }\n  return undefined;\n}\n// variable used to generate id\nlet idCounter = 42;\n/**\n * Returns a new random id every time it gets called.\n *\n * Has side effect!\n */\nexport function uniqueId(prefix) {\n  const id = ++idCounter;\n  return prefix ? String(prefix) + id : id;\n}\n/**\n * Resets the id counter used in uniqueId. This can be useful for testing.\n */\nexport function resetIdCounter() {\n  idCounter = 42;\n}\nexport function internalField(name) {\n  return isInternalField(name) ? name : `__${name}`;\n}\nexport function isInternalField(name) {\n  return name.startsWith('__');\n}\n/**\n * Normalize angle to be within [0,360).\n */\nexport function normalizeAngle(angle) {\n  if (angle === undefined) {\n    return undefined;\n  }\n  return (angle % 360 + 360) % 360;\n}\n/**\n * Returns whether the passed in value is a valid number.\n */\nexport function isNumeric(value) {\n  if (isNumber(value)) {\n    return true;\n  }\n  return !isNaN(value) && !isNaN(parseFloat(value));\n}","map":{"version":3,"names":["default","clone_","deepEqual_","stableStringify","hasOwnProperty","isNumber","isString","splitAccessPath","stringValue","writeConfig","isLogicalAnd","isLogicalNot","isLogicalOr","deepEqual","duplicate","never","message","Error","pick","obj","props","copy","prop","omit","Set","prototype","map","x","join","stringify","hash","a","str","length","h","i","char","charCodeAt","isNullOrFalse","contains","array","item","includes","some","arr","f","k","entries","every","mergeDeep","dest","src","s","deepMerge_","property","keys","unique","values","results","u","v","val","push","isEqual","dict","other","dictKeys","otherKeys","key","setEqual","b","size","e","has","hasIntersection","prefixGenerator","prefixes","splitField","wrappedWithAccessors","y","computedPrefixes","_","slice","add","fieldIntersection","undefined","isEmpty","Object","vals","isBoolean","varName","alphanumericS","replace","match","logicalExpr","op","cb","not","and","or","deleteNestedProperty","orderedProps","shift","titleCase","charAt","toUpperCase","substr","accessPathWithDatum","path","datum","pieces","prefix","flatAccessWithDatum","escapePathAccess","string","replacePathInField","replaceAll","find","replacement","RegExp","removePathFromField","accessPathDepth","getFirstDefined","args","arg","idCounter","uniqueId","id","String","resetIdCounter","internalField","name","isInternalField","startsWith","normalizeAngle","angle","isNumeric","value","isNaN","parseFloat"],"sources":["../../src/util.ts"],"sourcesContent":[null],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}