{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport { isArgmaxDef, isArgminDef } from '../../aggregate';\nimport { getPositionChannelFromLatLong, getSecondaryRangeChannel, isGeoPositionChannel, isScaleChannel } from '../../channel';\nimport { binRequiresRange, hasBandEnd, isScaleFieldDef, isTypedFieldDef, vgField } from '../../channeldef';\nimport * as log from '../../log';\nimport { isFieldRange } from '../../scale';\nimport { duplicate, hash, keys, replacePathInField, setEqual } from '../../util';\nimport { isUnitModel } from '../model';\nimport { DataFlowNode } from './dataflow';\nfunction addDimension(dims, channel, fieldDef, model) {\n  const channelDef2 = isUnitModel(model) ? model.encoding[getSecondaryRangeChannel(channel)] : undefined;\n  if (isTypedFieldDef(fieldDef) && isUnitModel(model) && hasBandEnd(fieldDef, channelDef2, model.markDef, model.config)) {\n    dims.add(vgField(fieldDef, {}));\n    dims.add(vgField(fieldDef, {\n      suffix: 'end'\n    }));\n    if (fieldDef.bin && binRequiresRange(fieldDef, channel)) {\n      dims.add(vgField(fieldDef, {\n        binSuffix: 'range'\n      }));\n    }\n  } else if (isGeoPositionChannel(channel)) {\n    const posChannel = getPositionChannelFromLatLong(channel);\n    dims.add(model.getName(posChannel));\n  } else {\n    dims.add(vgField(fieldDef));\n  }\n  if (isScaleFieldDef(fieldDef) && isFieldRange(fieldDef.scale?.range)) {\n    dims.add(fieldDef.scale.range.field);\n  }\n  return dims;\n}\nfunction mergeMeasures(parentMeasures, childMeasures) {\n  for (const field of keys(childMeasures)) {\n    // when we merge a measure, we either have to add an aggregation operator or even a new field\n    const ops = childMeasures[field];\n    for (const op of keys(ops)) {\n      if (field in parentMeasures) {\n        // add operator to existing measure field\n        parentMeasures[field][op] = new Set([...(parentMeasures[field][op] ?? []), ...ops[op]]);\n      } else {\n        parentMeasures[field] = {\n          [op]: ops[op]\n        };\n      }\n    }\n  }\n}\nexport class AggregateNode extends DataFlowNode {\n  clone() {\n    return new AggregateNode(null, new Set(this.dimensions), duplicate(this.measures));\n  }\n  /**\n   * @param dimensions string set for dimensions\n   * @param measures dictionary mapping field name => dict of aggregation functions and names to use\n   */\n  constructor(parent, dimensions, measures) {\n    super(parent);\n    this.dimensions = dimensions;\n    this.measures = measures;\n  }\n  get groupBy() {\n    return this.dimensions;\n  }\n  static makeFromEncoding(parent, model) {\n    let isAggregate = false;\n    model.forEachFieldDef(fd => {\n      if (fd.aggregate) {\n        isAggregate = true;\n      }\n    });\n    const meas = {};\n    const dims = new Set();\n    if (!isAggregate) {\n      // no need to create this node if the model has no aggregation\n      return null;\n    }\n    model.forEachFieldDef((fieldDef, channel) => {\n      const {\n        aggregate,\n        field\n      } = fieldDef;\n      if (aggregate) {\n        if (aggregate === 'count') {\n          meas['*'] ?? (meas['*'] = {});\n          meas['*']['count'] = new Set([vgField(fieldDef, {\n            forAs: true\n          })]);\n        } else {\n          if (isArgminDef(aggregate) || isArgmaxDef(aggregate)) {\n            const op = isArgminDef(aggregate) ? 'argmin' : 'argmax';\n            const argField = aggregate[op];\n            meas[argField] ?? (meas[argField] = {});\n            meas[argField][op] = new Set([vgField({\n              op,\n              field: argField\n            }, {\n              forAs: true\n            })]);\n          } else {\n            meas[field] ?? (meas[field] = {});\n            meas[field][aggregate] = new Set([vgField(fieldDef, {\n              forAs: true\n            })]);\n          }\n          // For scale channel with domain === 'unaggregated', add min/max so we can use their union as unaggregated domain\n          if (isScaleChannel(channel) && model.scaleDomain(channel) === 'unaggregated') {\n            meas[field] ?? (meas[field] = {});\n            meas[field]['min'] = new Set([vgField({\n              field,\n              aggregate: 'min'\n            }, {\n              forAs: true\n            })]);\n            meas[field]['max'] = new Set([vgField({\n              field,\n              aggregate: 'max'\n            }, {\n              forAs: true\n            })]);\n          }\n        }\n      } else {\n        addDimension(dims, channel, fieldDef, model);\n      }\n    });\n    if (dims.size + keys(meas).length === 0) {\n      return null;\n    }\n    return new AggregateNode(parent, dims, meas);\n  }\n  static makeFromTransform(parent, t) {\n    const dims = new Set();\n    const meas = {};\n    for (const s of t.aggregate) {\n      const {\n        op,\n        field,\n        as\n      } = s;\n      if (op) {\n        if (op === 'count') {\n          meas['*'] ?? (meas['*'] = {});\n          meas['*']['count'] = new Set([as ? as : vgField(s, {\n            forAs: true\n          })]);\n        } else {\n          meas[field] ?? (meas[field] = {});\n          meas[field][op] = new Set([as ? as : vgField(s, {\n            forAs: true\n          })]);\n        }\n      }\n    }\n    for (const s of t.groupby ?? []) {\n      dims.add(s);\n    }\n    if (dims.size + keys(meas).length === 0) {\n      return null;\n    }\n    return new AggregateNode(parent, dims, meas);\n  }\n  merge(other) {\n    if (setEqual(this.dimensions, other.dimensions)) {\n      mergeMeasures(this.measures, other.measures);\n      return true;\n    }\n    log.debug('different dimensions, cannot merge');\n    return false;\n  }\n  addDimensions(fields) {\n    fields.forEach(this.dimensions.add, this.dimensions);\n  }\n  dependentFields() {\n    return new Set([...this.dimensions, ...keys(this.measures)]);\n  }\n  producedFields() {\n    const out = new Set();\n    for (const field of keys(this.measures)) {\n      for (const op of keys(this.measures[field])) {\n        const m = this.measures[field][op];\n        if (m.size === 0) {\n          out.add(`${op}_${field}`);\n        } else {\n          m.forEach(out.add, out);\n        }\n      }\n    }\n    return out;\n  }\n  hash() {\n    return `Aggregate ${hash({\n      dimensions: this.dimensions,\n      measures: this.measures\n    })}`;\n  }\n  assemble() {\n    const ops = [];\n    const fields = [];\n    const as = [];\n    for (const field of keys(this.measures)) {\n      for (const op of keys(this.measures[field])) {\n        for (const alias of this.measures[field][op]) {\n          as.push(alias);\n          ops.push(op);\n          fields.push(field === '*' ? null : replacePathInField(field));\n        }\n      }\n    }\n    const result = {\n      type: 'aggregate',\n      groupby: [...this.dimensions].map(replacePathInField),\n      ops,\n      fields,\n      as\n    };\n    return result;\n  }\n}","map":{"version":3,"names":["isArgmaxDef","isArgminDef","getPositionChannelFromLatLong","getSecondaryRangeChannel","isGeoPositionChannel","isScaleChannel","binRequiresRange","hasBandEnd","isScaleFieldDef","isTypedFieldDef","vgField","log","isFieldRange","duplicate","hash","keys","replacePathInField","setEqual","isUnitModel","DataFlowNode","addDimension","dims","channel","fieldDef","model","channelDef2","encoding","undefined","markDef","config","add","suffix","bin","binSuffix","posChannel","getName","scale","range","field","mergeMeasures","parentMeasures","childMeasures","ops","op","Set","AggregateNode","clone","dimensions","measures","constructor","parent","groupBy","makeFromEncoding","isAggregate","forEachFieldDef","fd","aggregate","meas","forAs","argField","scaleDomain","size","length","makeFromTransform","t","s","as","groupby","merge","other","debug","addDimensions","fields","forEach","dependentFields","producedFields","out","m","assemble","alias","push","result","type","map"],"sources":["../../../../src/compile/data/aggregate.ts"],"sourcesContent":[null],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}