{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport { isArray, isString } from 'vega-util';\nimport { getFieldDef, isFieldDef, isOrderOnlyDef, vgField } from '../../channeldef';\nimport { duplicate, getFirstDefined, hash } from '../../util';\nimport { sortParams } from '../common';\nimport { DataFlowNode } from './dataflow';\nfunction getStackByFields(model) {\n  return model.stack.stackBy.reduce((fields, by) => {\n    const fieldDef = by.fieldDef;\n    const _field = vgField(fieldDef);\n    if (_field) {\n      fields.push(_field);\n    }\n    return fields;\n  }, []);\n}\nfunction isValidAsArray(as) {\n  return isArray(as) && as.every(s => isString(s)) && as.length > 1;\n}\nexport class StackNode extends DataFlowNode {\n  clone() {\n    return new StackNode(null, duplicate(this._stack));\n  }\n  constructor(parent, stack) {\n    super(parent);\n    this._stack = stack;\n  }\n  static makeFromTransform(parent, stackTransform) {\n    const {\n      stack,\n      groupby,\n      as,\n      offset = 'zero'\n    } = stackTransform;\n    const sortFields = [];\n    const sortOrder = [];\n    if (stackTransform.sort !== undefined) {\n      for (const sortField of stackTransform.sort) {\n        sortFields.push(sortField.field);\n        sortOrder.push(getFirstDefined(sortField.order, 'ascending'));\n      }\n    }\n    const sort = {\n      field: sortFields,\n      order: sortOrder\n    };\n    let normalizedAs;\n    if (isValidAsArray(as)) {\n      normalizedAs = as;\n    } else if (isString(as)) {\n      normalizedAs = [as, `${as}_end`];\n    } else {\n      normalizedAs = [`${stackTransform.stack}_start`, `${stackTransform.stack}_end`];\n    }\n    return new StackNode(parent, {\n      dimensionFieldDefs: [],\n      stackField: stack,\n      groupby,\n      offset,\n      sort,\n      facetby: [],\n      as: normalizedAs\n    });\n  }\n  static makeFromEncoding(parent, model) {\n    const stackProperties = model.stack;\n    const {\n      encoding\n    } = model;\n    if (!stackProperties) {\n      return null;\n    }\n    const {\n      groupbyChannels,\n      fieldChannel,\n      offset,\n      impute\n    } = stackProperties;\n    const dimensionFieldDefs = groupbyChannels.map(groupbyChannel => {\n      const cDef = encoding[groupbyChannel];\n      return getFieldDef(cDef);\n    }).filter(def => !!def);\n    const stackby = getStackByFields(model);\n    const orderDef = model.encoding.order;\n    let sort;\n    if (isArray(orderDef) || isFieldDef(orderDef)) {\n      sort = sortParams(orderDef);\n    } else {\n      const sortOrder = isOrderOnlyDef(orderDef) ? orderDef.sort : fieldChannel === 'y' ? 'descending' : 'ascending';\n      // default = descending by stackFields\n      // FIXME is the default here correct for binned fields?\n      sort = stackby.reduce((s, field) => {\n        s.field.push(field);\n        s.order.push(sortOrder);\n        return s;\n      }, {\n        field: [],\n        order: []\n      });\n    }\n    return new StackNode(parent, {\n      dimensionFieldDefs,\n      stackField: model.vgField(fieldChannel),\n      facetby: [],\n      stackby,\n      sort,\n      offset,\n      impute,\n      as: [model.vgField(fieldChannel, {\n        suffix: 'start',\n        forAs: true\n      }), model.vgField(fieldChannel, {\n        suffix: 'end',\n        forAs: true\n      })]\n    });\n  }\n  get stack() {\n    return this._stack;\n  }\n  addDimensions(fields) {\n    this._stack.facetby.push(...fields);\n  }\n  dependentFields() {\n    const out = new Set();\n    out.add(this._stack.stackField);\n    this.getGroupbyFields().forEach(out.add, out);\n    this._stack.facetby.forEach(out.add, out);\n    this._stack.sort.field.forEach(out.add, out);\n    return out;\n  }\n  producedFields() {\n    return new Set(this._stack.as);\n  }\n  hash() {\n    return `Stack ${hash(this._stack)}`;\n  }\n  getGroupbyFields() {\n    const {\n      dimensionFieldDefs,\n      impute,\n      groupby\n    } = this._stack;\n    if (dimensionFieldDefs.length > 0) {\n      return dimensionFieldDefs.map(dimensionFieldDef => {\n        if (dimensionFieldDef.bin) {\n          if (impute) {\n            // For binned group by field with impute, we calculate bin_mid\n            // as we cannot impute two fields simultaneously\n            return [vgField(dimensionFieldDef, {\n              binSuffix: 'mid'\n            })];\n          }\n          return [\n          // For binned group by field without impute, we need both bin (start) and bin_end\n          vgField(dimensionFieldDef, {}), vgField(dimensionFieldDef, {\n            binSuffix: 'end'\n          })];\n        }\n        return [vgField(dimensionFieldDef)];\n      }).flat();\n    }\n    return groupby ?? [];\n  }\n  assemble() {\n    const transform = [];\n    const {\n      facetby,\n      dimensionFieldDefs,\n      stackField: field,\n      stackby,\n      sort,\n      offset,\n      impute,\n      as\n    } = this._stack;\n    // Impute\n    if (impute) {\n      for (const dimensionFieldDef of dimensionFieldDefs) {\n        const {\n          bandPosition = 0.5,\n          bin\n        } = dimensionFieldDef;\n        if (bin) {\n          // As we can only impute one field at a time, we need to calculate\n          // mid point for a binned field\n          const binStart = vgField(dimensionFieldDef, {\n            expr: 'datum'\n          });\n          const binEnd = vgField(dimensionFieldDef, {\n            expr: 'datum',\n            binSuffix: 'end'\n          });\n          transform.push({\n            type: 'formula',\n            expr: `${bandPosition}*${binStart}+${1 - bandPosition}*${binEnd}`,\n            as: vgField(dimensionFieldDef, {\n              binSuffix: 'mid',\n              forAs: true\n            })\n          });\n        }\n        transform.push({\n          type: 'impute',\n          field,\n          groupby: [...stackby, ...facetby],\n          key: vgField(dimensionFieldDef, {\n            binSuffix: 'mid'\n          }),\n          method: 'value',\n          value: 0\n        });\n      }\n    }\n    // Stack\n    transform.push({\n      type: 'stack',\n      groupby: [...this.getGroupbyFields(), ...facetby],\n      field,\n      sort,\n      as,\n      offset\n    });\n    return transform;\n  }\n}","map":{"version":3,"names":["isArray","isString","getFieldDef","isFieldDef","isOrderOnlyDef","vgField","duplicate","getFirstDefined","hash","sortParams","DataFlowNode","getStackByFields","model","stack","stackBy","reduce","fields","by","fieldDef","_field","push","isValidAsArray","as","every","s","length","StackNode","clone","_stack","constructor","parent","makeFromTransform","stackTransform","groupby","offset","sortFields","sortOrder","sort","undefined","sortField","field","order","normalizedAs","dimensionFieldDefs","stackField","facetby","makeFromEncoding","stackProperties","encoding","groupbyChannels","fieldChannel","impute","map","groupbyChannel","cDef","filter","def","stackby","orderDef","suffix","forAs","addDimensions","dependentFields","out","Set","add","getGroupbyFields","forEach","producedFields","dimensionFieldDef","bin","binSuffix","flat","assemble","transform","bandPosition","binStart","expr","binEnd","type","key","method","value"],"sources":["../../../../src/compile/data/stack.ts"],"sourcesContent":[null],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}