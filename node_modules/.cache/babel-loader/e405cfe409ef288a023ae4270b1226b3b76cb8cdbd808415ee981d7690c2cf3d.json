{"ast":null,"code":"import { isArray, isNumber } from 'vega-util';\nimport { isBinned, isBinning, isBinParams } from '../../../bin';\nimport { getOffsetChannel, getSecondaryRangeChannel, getSizeChannel, getVgPositionChannel, isPolarPositionChannel, isXorY } from '../../../channel';\nimport { getBandSize, isFieldDef, isFieldOrDatumDef, vgField } from '../../../channeldef';\nimport { getViewConfigDiscreteStep } from '../../../config';\nimport * as log from '../../../log';\nimport { isRelativeBandSize } from '../../../mark';\nimport { hasDiscreteDomain } from '../../../scale';\nimport { isSignalRef, isVgRangeStep } from '../../../vega.schema';\nimport { getMarkConfig, getMarkPropOrConfig, signalOrStringValue, signalOrValueRef } from '../../common';\nimport { nonPosition } from './nonposition';\nimport { positionOffset } from './offset';\nimport { vgAlignedPositionChannel } from './position-align';\nimport { pointPositionDefaultRef } from './position-point';\nimport { rangePosition } from './position-range';\nimport * as ref from './valueref';\nimport { getOffsetScaleChannel } from '../../../channel';\nimport { getFirstDefined } from '../../../util';\nexport function rectPosition(model, channel) {\n  const {\n    config,\n    encoding,\n    markDef\n  } = model;\n  const mark = markDef.type;\n  const channel2 = getSecondaryRangeChannel(channel);\n  const sizeChannel = getSizeChannel(channel);\n  const channelDef = encoding[channel];\n  const channelDef2 = encoding[channel2];\n  const scale = model.getScaleComponent(channel);\n  const scaleType = scale ? scale.get('type') : undefined;\n  const orient = markDef.orient;\n  const hasSizeDef = encoding[sizeChannel] ?? encoding.size ?? getMarkPropOrConfig('size', markDef, config, {\n    vgChannel: sizeChannel\n  });\n  const offsetScaleChannel = getOffsetChannel(channel);\n  const isBarBand = mark === 'bar' && (channel === 'x' ? orient === 'vertical' : orient === 'horizontal');\n  // x, x2, and width -- we must specify two of these in all conditions\n  if (isFieldDef(channelDef) && (isBinning(channelDef.bin) || isBinned(channelDef.bin) || channelDef.timeUnit && !channelDef2) && !(hasSizeDef && !isRelativeBandSize(hasSizeDef)) && !encoding[offsetScaleChannel] && !hasDiscreteDomain(scaleType)) {\n    return rectBinPosition({\n      fieldDef: channelDef,\n      fieldDef2: channelDef2,\n      channel,\n      model\n    });\n  } else if ((isFieldOrDatumDef(channelDef) && hasDiscreteDomain(scaleType) || isBarBand) && !channelDef2) {\n    return positionAndSize(channelDef, channel, model);\n  } else {\n    return rangePosition(channel, model, {\n      defaultPos: 'zeroOrMax',\n      defaultPos2: 'zeroOrMin'\n    });\n  }\n}\nfunction defaultSizeRef(sizeChannel, scaleName, scale, config, bandSize, hasFieldDef, mark) {\n  if (isRelativeBandSize(bandSize)) {\n    if (scale) {\n      const scaleType = scale.get('type');\n      if (scaleType === 'band') {\n        let bandWidth = `bandwidth('${scaleName}')`;\n        if (bandSize.band !== 1) {\n          bandWidth = `${bandSize.band} * ${bandWidth}`;\n        }\n        const minBandSize = getMarkConfig('minBandSize', {\n          type: mark\n        }, config);\n        return {\n          signal: minBandSize ? `max(${signalOrStringValue(minBandSize)}, ${bandWidth})` : bandWidth\n        };\n      } else if (bandSize.band !== 1) {\n        log.warn(log.message.cannotUseRelativeBandSizeWithNonBandScale(scaleType));\n        bandSize = undefined;\n      }\n    } else {\n      return {\n        mult: bandSize.band,\n        field: {\n          group: sizeChannel\n        }\n      };\n    }\n  } else if (isSignalRef(bandSize)) {\n    return bandSize;\n  } else if (bandSize) {\n    return {\n      value: bandSize\n    };\n  }\n  // no valid band size\n  if (scale) {\n    const scaleRange = scale.get('range');\n    if (isVgRangeStep(scaleRange) && isNumber(scaleRange.step)) {\n      return {\n        value: scaleRange.step - 2\n      };\n    }\n  }\n  if (!hasFieldDef) {\n    const {\n      bandPaddingInner,\n      barBandPaddingInner,\n      rectBandPaddingInner\n    } = config.scale;\n    const padding = getFirstDefined(bandPaddingInner, mark === 'bar' ? barBandPaddingInner : rectBandPaddingInner); // this part is like paddingInner in scale.ts\n    if (isSignalRef(padding)) {\n      return {\n        signal: `(1 - (${padding.signal})) * ${sizeChannel}`\n      };\n    } else if (isNumber(padding)) {\n      return {\n        signal: `${1 - padding} * ${sizeChannel}`\n      };\n    }\n  }\n  const defaultStep = getViewConfigDiscreteStep(config.view, sizeChannel);\n  return {\n    value: defaultStep - 2\n  };\n}\n/**\n * Output position encoding and its size encoding for continuous, point, and band scales.\n */\nfunction positionAndSize(fieldDef, channel, model) {\n  const {\n    markDef,\n    encoding,\n    config,\n    stack\n  } = model;\n  const orient = markDef.orient;\n  const scaleName = model.scaleName(channel);\n  const scale = model.getScaleComponent(channel);\n  const vgSizeChannel = getSizeChannel(channel);\n  const channel2 = getSecondaryRangeChannel(channel);\n  const offsetScaleChannel = getOffsetChannel(channel);\n  const offsetScaleName = model.scaleName(offsetScaleChannel);\n  const offsetScale = model.getScaleComponent(getOffsetScaleChannel(channel));\n  // use \"size\" channel for bars, if there is orient and the channel matches the right orientation\n  const useVlSizeChannel = orient === 'horizontal' && channel === 'y' || orient === 'vertical' && channel === 'x';\n  // Use size encoding / mark property / config if it exists\n  let sizeMixins;\n  if (encoding.size || markDef.size) {\n    if (useVlSizeChannel) {\n      sizeMixins = nonPosition('size', model, {\n        vgChannel: vgSizeChannel,\n        defaultRef: signalOrValueRef(markDef.size)\n      });\n    } else {\n      log.warn(log.message.cannotApplySizeToNonOrientedMark(markDef.type));\n    }\n  }\n  const hasSizeFromMarkOrEncoding = !!sizeMixins;\n  // Otherwise, apply default value\n  const bandSize = getBandSize({\n    channel,\n    fieldDef,\n    markDef,\n    config,\n    scaleType: scale?.get('type'),\n    useVlSizeChannel\n  });\n  sizeMixins = sizeMixins || {\n    [vgSizeChannel]: defaultSizeRef(vgSizeChannel, offsetScaleName || scaleName, offsetScale || scale, config, bandSize, !!fieldDef, markDef.type)\n  };\n  /*\n    Band scales with size value and all point scales, use xc/yc + band=0.5\n       Otherwise (band scales that has size based on a band ref), use x/y with position band = (1 - size_band) / 2.\n    In this case, size_band is the band specified in the x/y-encoding.\n    By default band is 1, so `(1 - band) / 2` = 0.\n    If band is 0.6, the the x/y position in such case should be `(1 - band) / 2` = 0.2\n   */\n  const defaultBandAlign = scale?.get('type') === 'band' && isRelativeBandSize(bandSize) && !hasSizeFromMarkOrEncoding ? 'top' : 'middle';\n  const vgChannel = vgAlignedPositionChannel(channel, markDef, config, defaultBandAlign);\n  const center = vgChannel === 'xc' || vgChannel === 'yc';\n  const {\n    offset,\n    offsetType\n  } = positionOffset({\n    channel,\n    markDef,\n    encoding,\n    model,\n    bandPosition: center ? 0.5 : 0\n  });\n  const posRef = ref.midPointRefWithPositionInvalidTest({\n    channel,\n    channelDef: fieldDef,\n    markDef,\n    config,\n    scaleName,\n    scale,\n    stack,\n    offset,\n    defaultRef: pointPositionDefaultRef({\n      model,\n      defaultPos: 'mid',\n      channel,\n      scaleName,\n      scale\n    }),\n    bandPosition: center ? offsetType === 'encoding' ? 0 : 0.5 : isSignalRef(bandSize) ? {\n      signal: `(1-${bandSize})/2`\n    } : isRelativeBandSize(bandSize) ? (1 - bandSize.band) / 2 : 0\n  });\n  if (vgSizeChannel) {\n    return {\n      [vgChannel]: posRef,\n      ...sizeMixins\n    };\n  } else {\n    // otherwise, we must simulate size by setting position2 = position + size\n    // (for theta/radius since Vega doesn't have thetaWidth/radiusWidth)\n    const vgChannel2 = getVgPositionChannel(channel2);\n    const sizeRef = sizeMixins[vgSizeChannel];\n    const sizeOffset = offset ? {\n      ...sizeRef,\n      offset\n    } : sizeRef;\n    return {\n      [vgChannel]: posRef,\n      // posRef might be an array that wraps position invalid test\n      [vgChannel2]: isArray(posRef) ? [posRef[0], {\n        ...posRef[1],\n        offset: sizeOffset\n      }] : {\n        ...posRef,\n        offset: sizeOffset\n      }\n    };\n  }\n}\nfunction getBinSpacing(channel, spacing, reverse, translate, offset, minBandSize, bandSizeExpr) {\n  if (isPolarPositionChannel(channel)) {\n    return 0;\n  }\n  const isEnd = channel === 'x' || channel === 'y2';\n  const spacingOffset = isEnd ? -spacing / 2 : spacing / 2;\n  if (isSignalRef(reverse) || isSignalRef(offset) || isSignalRef(translate) || minBandSize) {\n    const reverseExpr = signalOrStringValue(reverse);\n    const offsetExpr = signalOrStringValue(offset);\n    const translateExpr = signalOrStringValue(translate);\n    const minBandSizeExpr = signalOrStringValue(minBandSize);\n    const sign = isEnd ? '' : '-';\n    const spacingAndSizeOffset = minBandSize ? `(${bandSizeExpr} < ${minBandSizeExpr} ? ${sign}0.5 * (${minBandSizeExpr} - (${bandSizeExpr})) : ${spacingOffset})` : spacingOffset;\n    const t = translateExpr ? `${translateExpr} + ` : '';\n    const r = reverseExpr ? `(${reverseExpr} ? -1 : 1) * ` : '';\n    const o = offsetExpr ? `(${offsetExpr} + ${spacingAndSizeOffset})` : spacingAndSizeOffset;\n    return {\n      signal: t + r + o\n    };\n  } else {\n    offset = offset || 0;\n    return translate + (reverse ? -offset - spacingOffset : +offset + spacingOffset);\n  }\n}\nfunction rectBinPosition({\n  fieldDef,\n  fieldDef2,\n  channel,\n  model\n}) {\n  const {\n    config,\n    markDef,\n    encoding\n  } = model;\n  const scale = model.getScaleComponent(channel);\n  const scaleName = model.scaleName(channel);\n  const scaleType = scale ? scale.get('type') : undefined;\n  const reverse = scale.get('reverse');\n  const bandSize = getBandSize({\n    channel,\n    fieldDef,\n    markDef,\n    config,\n    scaleType\n  });\n  const axis = model.component.axes[channel]?.[0];\n  const axisTranslate = axis?.get('translate') ?? 0.5; // vega default is 0.5\n  const spacing = isXorY(channel) ? getMarkPropOrConfig('binSpacing', markDef, config) ?? 0 : 0;\n  const channel2 = getSecondaryRangeChannel(channel);\n  const vgChannel = getVgPositionChannel(channel);\n  const vgChannel2 = getVgPositionChannel(channel2);\n  const minBandSize = getMarkConfig('minBandSize', markDef, config);\n  const {\n    offset\n  } = positionOffset({\n    channel,\n    markDef,\n    encoding,\n    model,\n    bandPosition: 0\n  });\n  const {\n    offset: offset2\n  } = positionOffset({\n    channel: channel2,\n    markDef,\n    encoding,\n    model,\n    bandPosition: 0\n  });\n  const bandSizeExpr = ref.binSizeExpr({\n    fieldDef,\n    scaleName\n  });\n  const binSpacingOffset = getBinSpacing(channel, spacing, reverse, axisTranslate, offset, minBandSize, bandSizeExpr);\n  const binSpacingOffset2 = getBinSpacing(channel2, spacing, reverse, axisTranslate, offset2 ?? offset, minBandSize, bandSizeExpr);\n  const bandPosition = isSignalRef(bandSize) ? {\n    signal: `(1-${bandSize.signal})/2`\n  } : isRelativeBandSize(bandSize) ? (1 - bandSize.band) / 2 : 0.5;\n  if (isBinning(fieldDef.bin) || fieldDef.timeUnit) {\n    return {\n      [vgChannel2]: rectBinRef({\n        fieldDef,\n        scaleName,\n        bandPosition,\n        offset: binSpacingOffset2\n      }),\n      [vgChannel]: rectBinRef({\n        fieldDef,\n        scaleName,\n        bandPosition: isSignalRef(bandPosition) ? {\n          signal: `1-${bandPosition.signal}`\n        } : 1 - bandPosition,\n        offset: binSpacingOffset\n      })\n    };\n  } else if (isBinned(fieldDef.bin)) {\n    const startRef = ref.valueRefForFieldOrDatumDef(fieldDef, scaleName, {}, {\n      offset: binSpacingOffset2\n    });\n    if (isFieldDef(fieldDef2)) {\n      return {\n        [vgChannel2]: startRef,\n        [vgChannel]: ref.valueRefForFieldOrDatumDef(fieldDef2, scaleName, {}, {\n          offset: binSpacingOffset\n        })\n      };\n    } else if (isBinParams(fieldDef.bin) && fieldDef.bin.step) {\n      return {\n        [vgChannel2]: startRef,\n        [vgChannel]: {\n          signal: `scale(\"${scaleName}\", ${vgField(fieldDef, {\n            expr: 'datum'\n          })} + ${fieldDef.bin.step})`,\n          offset: binSpacingOffset\n        }\n      };\n    }\n  }\n  log.warn(log.message.channelRequiredForBinned(channel2));\n  return undefined;\n}\n/**\n * Value Ref for binned fields\n */\nexport function rectBinRef({\n  fieldDef,\n  scaleName,\n  bandPosition,\n  offset\n}) {\n  return ref.interpolatedSignalRef({\n    scaleName,\n    fieldOrDatumDef: fieldDef,\n    bandPosition,\n    offset\n  });\n}","map":{"version":3,"names":["isArray","isNumber","isBinned","isBinning","isBinParams","getOffsetChannel","getSecondaryRangeChannel","getSizeChannel","getVgPositionChannel","isPolarPositionChannel","isXorY","getBandSize","isFieldDef","isFieldOrDatumDef","vgField","getViewConfigDiscreteStep","log","isRelativeBandSize","hasDiscreteDomain","isSignalRef","isVgRangeStep","getMarkConfig","getMarkPropOrConfig","signalOrStringValue","signalOrValueRef","nonPosition","positionOffset","vgAlignedPositionChannel","pointPositionDefaultRef","rangePosition","ref","getOffsetScaleChannel","getFirstDefined","rectPosition","model","channel","config","encoding","markDef","mark","type","channel2","sizeChannel","channelDef","channelDef2","scale","getScaleComponent","scaleType","get","undefined","orient","hasSizeDef","size","vgChannel","offsetScaleChannel","isBarBand","bin","timeUnit","rectBinPosition","fieldDef","fieldDef2","positionAndSize","defaultPos","defaultPos2","defaultSizeRef","scaleName","bandSize","hasFieldDef","bandWidth","band","minBandSize","signal","warn","message","cannotUseRelativeBandSizeWithNonBandScale","mult","field","group","value","scaleRange","step","bandPaddingInner","barBandPaddingInner","rectBandPaddingInner","padding","defaultStep","view","stack","vgSizeChannel","offsetScaleName","offsetScale","useVlSizeChannel","sizeMixins","defaultRef","cannotApplySizeToNonOrientedMark","hasSizeFromMarkOrEncoding","defaultBandAlign","center","offset","offsetType","bandPosition","posRef","midPointRefWithPositionInvalidTest","vgChannel2","sizeRef","sizeOffset","getBinSpacing","spacing","reverse","translate","bandSizeExpr","isEnd","spacingOffset","reverseExpr","offsetExpr","translateExpr","minBandSizeExpr","sign","spacingAndSizeOffset","t","r","o","axis","component","axes","axisTranslate","offset2","binSizeExpr","binSpacingOffset","binSpacingOffset2","rectBinRef","startRef","valueRefForFieldOrDatumDef","expr","channelRequiredForBinned","interpolatedSignalRef","fieldOrDatumDef"],"sources":["../../../../../src/compile/mark/encode/position-rect.ts"],"sourcesContent":[null],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}