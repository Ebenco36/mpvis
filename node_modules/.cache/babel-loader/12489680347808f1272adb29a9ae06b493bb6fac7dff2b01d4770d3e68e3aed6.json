{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport { stringValue } from 'vega-util';\nimport { VL_SELECTION_RESOLVE } from '.';\nimport { isScaleChannel } from '../../channel';\nimport * as log from '../../log';\nimport { hasContinuousDomain } from '../../scale';\nimport { isLayerModel } from '../model';\nimport { replacePathInField } from '../../util';\nconst scaleBindings = {\n  defined: selCmpt => {\n    return selCmpt.type === 'interval' && selCmpt.resolve === 'global' && selCmpt.bind && selCmpt.bind === 'scales';\n  },\n  parse: (model, selCmpt) => {\n    const bound = selCmpt.scales = [];\n    for (const proj of selCmpt.project.items) {\n      const channel = proj.channel;\n      if (!isScaleChannel(channel)) {\n        continue;\n      }\n      const scale = model.getScaleComponent(channel);\n      const scaleType = scale ? scale.get('type') : undefined;\n      if (!scale || !hasContinuousDomain(scaleType)) {\n        log.warn(log.message.SCALE_BINDINGS_CONTINUOUS);\n        continue;\n      }\n      scale.set('selectionExtent', {\n        param: selCmpt.name,\n        field: proj.field\n      }, true);\n      bound.push(proj);\n    }\n  },\n  topLevelSignals: (model, selCmpt, signals) => {\n    const bound = selCmpt.scales.filter(proj => signals.filter(s => s.name === proj.signals.data).length === 0);\n    // Top-level signals are only needed for multiview displays and if this\n    // view's top-level signals haven't already been generated.\n    if (!model.parent || isTopLevelLayer(model) || bound.length === 0) {\n      return signals;\n    }\n    // vlSelectionResolve does not account for the behavior of bound scales in\n    // multiview displays. Each unit view adds a tuple to the store, but the\n    // state of the selection is the unit selection most recently updated. This\n    // state is captured by the top-level signals that we insert and \"push\n    // outer\" to from within the units. We need to reassemble this state into\n    // the top-level named signal, except no single selCmpt has a global view.\n    const namedSg = signals.filter(s => s.name === selCmpt.name)[0];\n    let update = namedSg.update;\n    if (update.indexOf(VL_SELECTION_RESOLVE) >= 0) {\n      namedSg.update = `{${bound.map(proj => `${stringValue(replacePathInField(proj.field))}: ${proj.signals.data}`).join(', ')}}`;\n    } else {\n      for (const proj of bound) {\n        const mapping = `${stringValue(replacePathInField(proj.field))}: ${proj.signals.data}`;\n        if (!update.includes(mapping)) {\n          update = `${update.substring(0, update.length - 1)}, ${mapping}}`;\n        }\n      }\n      namedSg.update = update;\n    }\n    return signals.concat(bound.map(proj => ({\n      name: proj.signals.data\n    })));\n  },\n  signals: (model, selCmpt, signals) => {\n    // Nested signals need only push to top-level signals with multiview displays.\n    if (model.parent && !isTopLevelLayer(model)) {\n      for (const proj of selCmpt.scales) {\n        const signal = signals.filter(s => s.name === proj.signals.data)[0];\n        signal.push = 'outer';\n        delete signal.value;\n        delete signal.update;\n      }\n    }\n    return signals;\n  }\n};\nexport default scaleBindings;\nexport function domain(model, channel) {\n  const scale = stringValue(model.scaleName(channel));\n  return `domain(${scale})`;\n}\nfunction isTopLevelLayer(model) {\n  return model.parent && isLayerModel(model.parent) && (!model.parent.parent ?? isTopLevelLayer(model.parent.parent));\n}","map":{"version":3,"names":["stringValue","VL_SELECTION_RESOLVE","isScaleChannel","log","hasContinuousDomain","isLayerModel","replacePathInField","scaleBindings","defined","selCmpt","type","resolve","bind","parse","model","bound","scales","proj","project","items","channel","scale","getScaleComponent","scaleType","get","undefined","warn","message","SCALE_BINDINGS_CONTINUOUS","set","param","name","field","push","topLevelSignals","signals","filter","s","data","length","parent","isTopLevelLayer","namedSg","update","indexOf","map","join","mapping","includes","substring","concat","signal","value","domain","scaleName"],"sources":["../../../../src/compile/selection/scales.ts"],"sourcesContent":[null],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}