{"ast":null,"code":"import { isString, mergeConfig } from 'vega-util';\nimport { getPositionScaleChannel } from '../channel';\nimport * as vlFieldDef from '../channeldef';\nimport { initConfig, stripAndRedirectConfig } from '../config';\nimport * as log from '../log';\nimport { normalize } from '../normalize';\nimport { assembleParameterSignals } from '../parameter';\nimport { extractTopLevelProperties, getFitType, isFitType } from '../spec/toplevel';\nimport { keys } from '../util';\nimport { buildModel } from './buildmodel';\nimport { assembleRootData } from './data/assemble';\nimport { optimizeDataflow } from './data/optimize';\n/**\n * Vega-Lite's main function, for compiling Vega-Lite spec into Vega spec.\n *\n * At a high-level, we make the following transformations in different phases:\n *\n * Input spec\n *     |\n *     |  (Normalization)\n *     v\n * Normalized Spec (Row/Column channels in single-view specs becomes faceted specs, composite marks becomes layered specs.)\n *     |\n *     |  (Build Model)\n *     v\n * A model tree of the spec\n *     |\n *     |  (Parse)\n *     v\n * A model tree with parsed components (intermediate structure of visualization primitives in a format that can be easily merged)\n *     |\n *     | (Optimize)\n *     v\n * A model tree with parsed components with the data component optimized\n *     |\n *     | (Assemble)\n *     v\n * Vega spec\n *\n * @param inputSpec The Vega-Lite specification.\n * @param opt       Optional arguments passed to the Vega-Lite compiler.\n * @returns         An object containing the compiled Vega spec and normalized Vega-Lite spec.\n */\nexport function compile(inputSpec, opt = {}) {\n  // 0. Augment opt with default opts\n  if (opt.logger) {\n    // set the singleton logger to the provided logger\n    log.set(opt.logger);\n  }\n  if (opt.fieldTitle) {\n    // set the singleton field title formatter\n    vlFieldDef.setTitleFormatter(opt.fieldTitle);\n  }\n  try {\n    // 1. Initialize config by deep merging default config with the config provided via option and the input spec.\n    const config = initConfig(mergeConfig(opt.config, inputSpec.config));\n    // 2. Normalize: Convert input spec -> normalized spec\n    // - Decompose all extended unit specs into composition of unit spec. For example, a box plot get expanded into multiple layers of bars, ticks, and rules. The shorthand row/column channel is also expanded to a facet spec.\n    // - Normalize autosize and width or height spec\n    const spec = normalize(inputSpec, config);\n    // 3. Build Model: normalized spec -> Model (a tree structure)\n    // This phases instantiates the models with default config by doing a top-down traversal. This allows us to pass properties that child models derive from their parents via their constructors.\n    // See the abstract `Model` class and its children (UnitModel, LayerModel, FacetModel, ConcatModel) for different types of models.\n    const model = buildModel(spec, null, '', undefined, config);\n    // 4 Parse: Model --> Model with components\n    // Note that components = intermediate representations that are equivalent to Vega specs.\n    // We need these intermediate representation because we need to merge many visualization \"components\" like projections, scales, axes, and legends.\n    // We will later convert these components into actual Vega specs in the assemble phase.\n    // In this phase, we do a bottom-up traversal over the whole tree to\n    // parse for each type of components once (e.g., data, layout, mark, scale).\n    // By doing bottom-up traversal, we start parsing components of unit specs and\n    // then merge child components of parent composite specs.\n    //\n    // Please see inside model.parse() for order of different components parsed.\n    model.parse();\n    // drawDataflow(model.component.data.sources);\n    // 5. Optimize the dataflow. This will modify the data component of the model.\n    optimizeDataflow(model.component.data, model);\n    // drawDataflow(model.component.data.sources);\n    // 6. Assemble: convert model components --> Vega Spec.\n    const vgSpec = assembleTopLevelModel(model, getTopLevelProperties(inputSpec, spec.autosize, config, model), inputSpec.datasets, inputSpec.usermeta);\n    return {\n      spec: vgSpec,\n      normalized: spec\n    };\n  } finally {\n    // Reset the singleton logger if a logger is provided\n    if (opt.logger) {\n      log.reset();\n    }\n    // Reset the singleton field title formatter if provided\n    if (opt.fieldTitle) {\n      vlFieldDef.resetTitleFormatter();\n    }\n  }\n}\nfunction getTopLevelProperties(inputSpec, autosize, config, model) {\n  const width = model.component.layoutSize.get('width');\n  const height = model.component.layoutSize.get('height');\n  if (autosize === undefined) {\n    autosize = {\n      type: 'pad'\n    };\n    if (model.hasAxisOrientSignalRef()) {\n      autosize.resize = true;\n    }\n  } else if (isString(autosize)) {\n    autosize = {\n      type: autosize\n    };\n  }\n  if (width && height && isFitType(autosize.type)) {\n    if (width === 'step' && height === 'step') {\n      log.warn(log.message.droppingFit());\n      autosize.type = 'pad';\n    } else if (width === 'step' || height === 'step') {\n      // effectively XOR, because else if\n      // get step dimension\n      const sizeType = width === 'step' ? 'width' : 'height';\n      // log that we're dropping fit for respective channel\n      log.warn(log.message.droppingFit(getPositionScaleChannel(sizeType)));\n      // setting type to inverse fit (so if we dropped fit-x, type is now fit-y)\n      const inverseSizeType = sizeType === 'width' ? 'height' : 'width';\n      autosize.type = getFitType(inverseSizeType);\n    }\n  }\n  return {\n    ...(keys(autosize).length === 1 && autosize.type ? autosize.type === 'pad' ? {} : {\n      autosize: autosize.type\n    } : {\n      autosize\n    }),\n    ...extractTopLevelProperties(config, false),\n    ...extractTopLevelProperties(inputSpec, true)\n  };\n}\n/*\n * Assemble the top-level model to a Vega spec.\n *\n * Note: this couldn't be `model.assemble()` since the top-level model\n * needs some special treatment to generate top-level properties.\n */\nfunction assembleTopLevelModel(model, topLevelProperties, datasets = {}, usermeta) {\n  // Config with Vega-Lite only config removed.\n  const vgConfig = model.config ? stripAndRedirectConfig(model.config) : undefined;\n  const data = [].concat(model.assembleSelectionData([]),\n  // only assemble data in the root\n  assembleRootData(model.component.data, datasets));\n  const projections = model.assembleProjections();\n  const title = model.assembleTitle();\n  const style = model.assembleGroupStyle();\n  const encodeEntry = model.assembleGroupEncodeEntry(true);\n  let layoutSignals = model.assembleLayoutSignals();\n  // move width and height signals with values to top level\n  layoutSignals = layoutSignals.filter(signal => {\n    if ((signal.name === 'width' || signal.name === 'height') && signal.value !== undefined) {\n      topLevelProperties[signal.name] = +signal.value;\n      return false;\n    }\n    return true;\n  });\n  const {\n    params,\n    ...otherTopLevelProps\n  } = topLevelProperties;\n  return {\n    $schema: 'https://vega.github.io/schema/vega/v5.json',\n    ...(model.description ? {\n      description: model.description\n    } : {}),\n    ...otherTopLevelProps,\n    ...(title ? {\n      title\n    } : {}),\n    ...(style ? {\n      style\n    } : {}),\n    ...(encodeEntry ? {\n      encode: {\n        update: encodeEntry\n      }\n    } : {}),\n    data,\n    ...(projections.length > 0 ? {\n      projections\n    } : {}),\n    ...model.assembleGroup([...layoutSignals, ...model.assembleSelectionTopLevelSignals([]), ...assembleParameterSignals(params)]),\n    ...(vgConfig ? {\n      config: vgConfig\n    } : {}),\n    ...(usermeta ? {\n      usermeta\n    } : {})\n  };\n}","map":{"version":3,"names":["isString","mergeConfig","getPositionScaleChannel","vlFieldDef","initConfig","stripAndRedirectConfig","log","normalize","assembleParameterSignals","extractTopLevelProperties","getFitType","isFitType","keys","buildModel","assembleRootData","optimizeDataflow","compile","inputSpec","opt","logger","set","fieldTitle","setTitleFormatter","config","spec","model","undefined","parse","component","data","vgSpec","assembleTopLevelModel","getTopLevelProperties","autosize","datasets","usermeta","normalized","reset","resetTitleFormatter","width","layoutSize","get","height","type","hasAxisOrientSignalRef","resize","warn","message","droppingFit","sizeType","inverseSizeType","length","topLevelProperties","vgConfig","concat","assembleSelectionData","projections","assembleProjections","title","assembleTitle","style","assembleGroupStyle","encodeEntry","assembleGroupEncodeEntry","layoutSignals","assembleLayoutSignals","filter","signal","name","value","params","otherTopLevelProps","$schema","description","encode","update","assembleGroup","assembleSelectionTopLevelSignals"],"sources":["../../../src/compile/compile.ts"],"sourcesContent":[null],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}