{"ast":null,"code":"import { normalizeEncoding } from '../encoding';\nimport * as log from '../log';\nimport { CompositeMarkNormalizer } from './base';\nimport { makeCompositeAggregatePartFactory } from './common';\nimport { errorBarParams } from './errorbar';\nexport const ERRORBAND = 'errorband';\nexport const ERRORBAND_PARTS = ['band', 'borders'];\nexport const errorBandNormalizer = new CompositeMarkNormalizer(ERRORBAND, normalizeErrorBand);\nexport function normalizeErrorBand(spec, {\n  config\n}) {\n  // Need to initEncoding first so we can infer type\n  spec = {\n    ...spec,\n    encoding: normalizeEncoding(spec.encoding, config)\n  };\n  const {\n    transform,\n    continuousAxisChannelDef,\n    continuousAxis,\n    encodingWithoutContinuousAxis,\n    markDef,\n    outerSpec,\n    tooltipEncoding\n  } = errorBarParams(spec, ERRORBAND, config);\n  const errorBandDef = markDef;\n  const makeErrorBandPart = makeCompositeAggregatePartFactory(errorBandDef, continuousAxis, continuousAxisChannelDef, encodingWithoutContinuousAxis, config.errorband);\n  const is2D = spec.encoding.x !== undefined && spec.encoding.y !== undefined;\n  let bandMark = {\n    type: is2D ? 'area' : 'rect'\n  };\n  let bordersMark = {\n    type: is2D ? 'line' : 'rule'\n  };\n  const interpolate = {\n    ...(errorBandDef.interpolate ? {\n      interpolate: errorBandDef.interpolate\n    } : {}),\n    ...(errorBandDef.tension && errorBandDef.interpolate ? {\n      tension: errorBandDef.tension\n    } : {})\n  };\n  if (is2D) {\n    bandMark = {\n      ...bandMark,\n      ...interpolate,\n      ariaRoleDescription: 'errorband'\n    };\n    bordersMark = {\n      ...bordersMark,\n      ...interpolate,\n      aria: false\n    };\n  } else if (errorBandDef.interpolate) {\n    log.warn(log.message.errorBand1DNotSupport('interpolate'));\n  } else if (errorBandDef.tension) {\n    log.warn(log.message.errorBand1DNotSupport('tension'));\n  }\n  return {\n    ...outerSpec,\n    transform,\n    layer: [...makeErrorBandPart({\n      partName: 'band',\n      mark: bandMark,\n      positionPrefix: 'lower',\n      endPositionPrefix: 'upper',\n      extraEncoding: tooltipEncoding\n    }), ...makeErrorBandPart({\n      partName: 'borders',\n      mark: bordersMark,\n      positionPrefix: 'lower',\n      extraEncoding: tooltipEncoding\n    }), ...makeErrorBandPart({\n      partName: 'borders',\n      mark: bordersMark,\n      positionPrefix: 'upper',\n      extraEncoding: tooltipEncoding\n    })]\n  };\n}","map":{"version":3,"names":["normalizeEncoding","log","CompositeMarkNormalizer","makeCompositeAggregatePartFactory","errorBarParams","ERRORBAND","ERRORBAND_PARTS","errorBandNormalizer","normalizeErrorBand","spec","config","encoding","transform","continuousAxisChannelDef","continuousAxis","encodingWithoutContinuousAxis","markDef","outerSpec","tooltipEncoding","errorBandDef","makeErrorBandPart","errorband","is2D","x","undefined","y","bandMark","type","bordersMark","interpolate","tension","ariaRoleDescription","aria","warn","message","errorBand1DNotSupport","layer","partName","mark","positionPrefix","endPositionPrefix","extraEncoding"],"sources":["../../../src/compositemark/errorband.ts"],"sourcesContent":[null],"mappings":"AAEA,SAAkBA,iBAAiB,QAAO,aAAa;AACvD,OAAO,KAAKC,GAAG,MAAM,QAAQ;AAI7B,SAAQC,uBAAuB,QAAO,QAAQ;AAC9C,SAAiCC,iCAAiC,QAAoB,UAAU;AAChG,SAAwCC,cAAc,QAAsB,YAAY;AAMxF,OAAO,MAAMC,SAAS,GAAG,WAAoB;AAG7C,OAAO,MAAMC,eAAe,GAAG,CAAC,MAAM,EAAE,SAAS,CAAU;AAwE3D,OAAO,MAAMC,mBAAmB,GAAG,IAAIL,uBAAuB,CAACG,SAAS,EAAEG,kBAAkB,CAAC;AAE7F,OAAM,SAAUA,kBAAkBA,CAChCC,IAAiE,EACjE;EAACC;AAAM,CAAmB;EAE1B;EACAD,IAAI,GAAG;IACL,GAAGA,IAAI;IACPE,QAAQ,EAAEX,iBAAiB,CAACS,IAAI,CAACE,QAAQ,EAAED,MAAM;GAClD;EAED,MAAM;IACJE,SAAS;IACTC,wBAAwB;IACxBC,cAAc;IACdC,6BAA6B;IAC7BC,OAAO;IACPC,SAAS;IACTC;EAAe,CAChB,GAAGd,cAAc,CAACK,IAAI,EAAEJ,SAAS,EAAEK,MAAM,CAAC;EAC3C,MAAMS,YAAY,GAAiBH,OAAO;EAE1C,MAAMI,iBAAiB,GAAGjB,iCAAiC,CACzDgB,YAAY,EACZL,cAAc,EACdD,wBAAwB,EACxBE,6BAA6B,EAC7BL,MAAM,CAACW,SAAS,CACjB;EAED,MAAMC,IAAI,GAAGb,IAAI,CAACE,QAAQ,CAACY,CAAC,KAAKC,SAAS,IAAIf,IAAI,CAACE,QAAQ,CAACc,CAAC,KAAKD,SAAS;EAE3E,IAAIE,QAAQ,GAAY;IAACC,IAAI,EAAEL,IAAI,GAAG,MAAM,GAAG;EAAM,CAAC;EACtD,IAAIM,WAAW,GAAY;IAACD,IAAI,EAAEL,IAAI,GAAG,MAAM,GAAG;EAAM,CAAC;EACzD,MAAMO,WAAW,GAAG;IAClB,IAAIV,YAAY,CAACU,WAAW,GAAG;MAACA,WAAW,EAAEV,YAAY,CAACU;IAAW,CAAC,GAAG,EAAE,CAAC;IAC5E,IAAIV,YAAY,CAACW,OAAO,IAAIX,YAAY,CAACU,WAAW,GAAG;MAACC,OAAO,EAAEX,YAAY,CAACW;IAAO,CAAC,GAAG,EAAE;GAC5F;EAED,IAAIR,IAAI,EAAE;IACRI,QAAQ,GAAG;MACT,GAAGA,QAAQ;MACX,GAAGG,WAAW;MACdE,mBAAmB,EAAE;KACtB;IACDH,WAAW,GAAG;MACZ,GAAGA,WAAW;MACd,GAAGC,WAAW;MACdG,IAAI,EAAE;KACP;GACF,MAAM,IAAIb,YAAY,CAACU,WAAW,EAAE;IACnC5B,GAAG,CAACgC,IAAI,CAAChC,GAAG,CAACiC,OAAO,CAACC,qBAAqB,CAAC,aAAa,CAAC,CAAC;GAC3D,MAAM,IAAIhB,YAAY,CAACW,OAAO,EAAE;IAC/B7B,GAAG,CAACgC,IAAI,CAAChC,GAAG,CAACiC,OAAO,CAACC,qBAAqB,CAAC,SAAS,CAAC,CAAC;;EAGxD,OAAO;IACL,GAAGlB,SAAS;IACZL,SAAS;IACTwB,KAAK,EAAE,CACL,GAAGhB,iBAAiB,CAAC;MACnBiB,QAAQ,EAAE,MAAM;MAChBC,IAAI,EAAEZ,QAAQ;MACda,cAAc,EAAE,OAAO;MACvBC,iBAAiB,EAAE,OAAO;MAC1BC,aAAa,EAAEvB;KAChB,CAAC,EACF,GAAGE,iBAAiB,CAAC;MACnBiB,QAAQ,EAAE,SAAS;MACnBC,IAAI,EAAEV,WAAW;MACjBW,cAAc,EAAE,OAAO;MAEvBE,aAAa,EAAEvB;KAChB,CAAC,EACF,GAAGE,iBAAiB,CAAC;MACnBiB,QAAQ,EAAE,SAAS;MACnBC,IAAI,EAAEV,WAAW;MACjBW,cAAc,EAAE,OAAO;MACvBE,aAAa,EAAEvB;KAChB,CAAC;GAEL;AACH"},"metadata":{},"sourceType":"module","externalDependencies":[]}